(()=>{"use strict";var e,r,t,n,o,a,i={180:(e,r,t)=>{Promise.all([t.e(230).then(t.t.bind(t,230,23)),t.e(881).then(t.t.bind(t,881,23))]).then((([{default:e},{default:r}])=>{const t=document.createElement("DIV");console.log(r(),e()),t.appendChild(r()),t.appendChild(e()),t.innerHTML+=(()=>{let e="<ul>";for(let r=0;r<6;r++)e+=`<li>item${r}</li>`;return e+"</ul>"})(),document.body.appendChild(t)}))},796:(e,r,t)=>{var n=new Error;e.exports=new Promise(((e,r)=>{if("undefined"!=typeof nav)return e();t.l("http://localhost:3003/remoteEntry.js",(t=>{if("undefined"!=typeof nav)return e();var o=t&&("load"===t.type?"missing":t.type),a=t&&t.target&&t.target.src;n.message="Loading script failed.\n("+o+": "+a+")",n.name="ScriptExternalLoadError",n.type=o,n.request=a,r(n)}),"nav")})).then((()=>nav))},467:(e,r,t)=>{var n=new Error;e.exports=new Promise(((e,r)=>{if("undefined"!=typeof search)return e();t.l("http://localhost:3002/remoteEntry.js",(t=>{if("undefined"!=typeof search)return e();var o=t&&("load"===t.type?"missing":t.type),a=t&&t.target&&t.target.src;n.message="Loading script failed.\n("+o+": "+a+")",n.name="ScriptExternalLoadError",n.type=o,n.request=a,r(n)}),"search")})).then((()=>search))}},l={};function s(e){var r=l[e];if(void 0!==r)return r.exports;var t=l[e]={exports:{}};return i[e](t,t.exports,s),t.exports}s.m=i,s.c=l,r=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(t,n){if(1&n&&(t=this(t)),8&n)return t;if("object"==typeof t&&t){if(4&n&&t.__esModule)return t;if(16&n&&"function"==typeof t.then)return t}var o=Object.create(null);s.r(o);var a={};e=e||[null,r({}),r([]),r(r)];for(var i=2&n&&t;"object"==typeof i&&!~e.indexOf(i);i=r(i))Object.getOwnPropertyNames(i).forEach((e=>a[e]=()=>t[e]));return a.default=()=>t,s.d(o,a),o},s.d=(e,r)=>{for(var t in r)s.o(r,t)&&!s.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((r,t)=>(s.f[t](e,r),r)),[])),s.u=e=>e+".js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),t={},n="home:",s.l=(e,r,o,a)=>{if(t[e])t[e].push(r);else{var i,l;if(void 0!==o)for(var u=document.getElementsByTagName("script"),c=0;c<u.length;c++){var f=u[c];if(f.getAttribute("src")==e||f.getAttribute("data-webpack")==n+o){i=f;break}}i||(l=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,s.nc&&i.setAttribute("nonce",s.nc),i.setAttribute("data-webpack",n+o),i.src=e),t[e]=[r];var p=(r,n)=>{i.onerror=i.onload=null,clearTimeout(d);var o=t[e];if(delete t[e],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((e=>e(n))),r)return r(n)},d=setTimeout(p.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=p.bind(null,i.onerror),i.onload=p.bind(null,i.onload),l&&document.head.appendChild(i)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o={230:[230],881:[881]},a={230:["default","./Search",467],881:["default","./Header",796]},s.f.remotes=(e,r)=>{s.o(o,e)&&o[e].forEach((e=>{var t=s.R;t||(t=[]);var n=a[e];if(!(t.indexOf(n)>=0)){if(t.push(n),n.p)return r.push(n.p);var o=r=>{r||(r=new Error("Container missing")),"string"==typeof r.message&&(r.message+='\nwhile loading "'+n[1]+'" from '+n[2]),i[e]=()=>{throw r},n.p=0},l=(e,t,a,i,l,s)=>{try{var u=e(t,a);if(!u||!u.then)return l(u,i,s);var c=u.then((e=>l(e,i)),o);if(!s)return c;r.push(n.p=c)}catch(e){o(e)}},u=(e,r,o)=>l(r.get,n[1],t,0,c,o),c=r=>{n.p=1,i[e]=e=>{e.exports=r()}};l(s,n[2],0,0,((e,r,t)=>e?l(s.I,n[0],0,e,u,t):o()),1)}}))},(()=>{s.S={};var e={},r={};s.I=(t,n)=>{n||(n=[]);var o=r[t];if(o||(o=r[t]={}),!(n.indexOf(o)>=0)){if(n.push(o),e[t])return e[t];s.o(s.S,t)||(s.S[t]={}),s.S[t];var a=e=>{var r=e=>{return r="Initialization of sharing external failed: "+e,"undefined"!=typeof console&&console.warn&&console.warn(r);var r};try{var o=s(e);if(!o)return;var a=e=>e&&e.init&&e.init(s.S[t],n);if(o.then)return i.push(o.then(a,r));var l=a(o);if(l&&l.then)return i.push(l.catch(r))}catch(e){r(e)}},i=[];return"default"===t&&(a(467),a(796)),i.length?e[t]=Promise.all(i).then((()=>e[t]=1)):e[t]=1}}})(),(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var r=s.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),(()=>{var e={179:0};s.f.j=(r,t)=>{var n=s.o(e,r)?e[r]:void 0;if(0!==n)if(n)t.push(n[2]);else if(179==r){var o=new Promise(((t,o)=>n=e[r]=[t,o]));t.push(n[2]=o);var a=s.p+s.u(r),i=new Error;s.l(a,(t=>{if(s.o(e,r)&&(0!==(n=e[r])&&(e[r]=void 0),n)){var o=t&&("load"===t.type?"missing":t.type),a=t&&t.target&&t.target.src;i.message="Loading chunk "+r+" failed.\n("+o+": "+a+")",i.name="ChunkLoadError",i.type=o,i.request=a,n[1](i)}}),"chunk-"+r,r)}else e[r]=0};var r=(r,t)=>{var n,o,[a,i,l]=t,u=0;if(a.some((r=>0!==e[r]))){for(n in i)s.o(i,n)&&(s.m[n]=i[n]);l&&l(s)}for(r&&r(t);u<a.length;u++)o=a[u],s.o(e,o)&&e[o]&&e[o][0](),e[o]=0},t=self.webpackChunkhome=self.webpackChunkhome||[];t.forEach(r.bind(null,0)),t.push=r.bind(null,t.push.bind(t))})(),s(180)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,